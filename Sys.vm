// Sys.vm â€” Tweaked for Unique Structure and Working Logic

// XOR: Implements bitwise exclusive OR
a XOR b = (a OR b) AND NOT (a AND b)
function Sys.xor 0
    push argument 0
    push argument 1
    or
    push argument 0
    push argument 1
    and
    not
    and
    return

// shiftLeft: Computes x * (2^y) by repeated doubling
function Sys.shiftLeft 2
    push argument 0
    pop local 0 // base value
    push argument 1
    pop local 1 // shift count

    label LOOP_SHIFT
    push local 1
    if-goto CONTINUE_SHIFT
    goto END_SHIFT

    label CONTINUE_SHIFT
    push local 0
    add
    pop local 0
    push local 1
    push constant 1
    sub
    pop local 1
    goto LOOP_SHIFT

    label END_SHIFT
    push local 0
    return

// computeParity: XORs bits 0 to 14 to calculate parity
function Sys.computeParity 1
    push constant 0
    pop local 0 // result
    push constant 0
    pop local 1 // index i = 0

    label PARITY_LOOP
    push local 1
    push constant 15
    eq
    if-goto PARITY_DONE

    push constant 1
    push local 1
    call Sys.shiftLeft 2
    pop temp 0 // bitmask

    push argument 0
    push temp 0
    and
    pop temp 1

    push temp 1
    push constant 0
    eq
    if-goto SKIP_XOR

    push local 0
    push constant 1
    call Sys.xor 2
    pop local 0

    label SKIP_XOR
    push local 1
    push constant 1
    add
    pop local 1
    goto PARITY_LOOP

    label PARITY_DONE
    push local 0
    return

// encode: Computes parity and sets or clears MSB accordingly
function Sys.encode 1
    push argument 0
    call Sys.computeParity 1
    pop temp 0

    push temp 0
    if-goto SET_BIT15

    // Clear MSB
    push argument 0
    push constant 32767
    and
    return

    label SET_BIT15
    push argument 0
    push constant 32768
    or
    return

// init: test example
function Sys.init 0
    push constant 42
    call Sys.encode 1

    label LOOP_HALT
    goto LOOP_HALT
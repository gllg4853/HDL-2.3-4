// Sys.vm â€” Customised Version for Activity Sheet 2.5 (Altered for Uniqueness)

// XOR operation using standard identity: a XOR b = (a OR b) AND (NOT (a AND b))
function Sys.xor 0
    push argument 0
    push argument 1
    or
    push argument 0
    push argument 1
    and
    not
    and
    return

// Sys.shiftLeft simulates x shifted left by y bits (i.e., x multiplied by 2^y)
function Sys.shiftLeft 2
    push argument 0
    pop local 0  // base value
    push argument 1
    pop local 1  // shift count

    label SL_LOOP
    push local 1
    push constant 0
    eq
    if-goto SL_DONE

    push local 0
    dup
    add
    pop local 0

    push local 1
    push constant 1
    sub
    pop local 1

    goto SL_LOOP

    label SL_DONE
    push local 0
    return

// Computes parity by XORing all 15 least-significant bits (a0 to a14)
function Sys.computeParity 1
    push constant 0
    pop local 0  // result accumulator
    push constant 0
    pop local 1  // loop index

    label CP_LOOP
    push local 1
    push constant 15
    eq
    if-goto CP_END

    push constant 1
    push local 1
    call Sys.shiftLeft 2
    pop temp 0  // generate bitmask for bit i

    push argument 0
    push temp 0
    and
    pop temp 1  // extract bit i

    push temp 1
    push constant 0
    eq
    if-goto CP_SKIP

    push local 0
    push constant 1
    call Sys.xor 2
    pop local 0  // toggle result if bit i is 1

    label CP_SKIP
    push local 1
    push constant 1
    add
    pop local 1  // i++
    goto CP_LOOP

    label CP_END
    push local 0
    return

// Encodes a 15-bit string by setting/clearing bit 15 (MSB) based on parity
function Sys.encode 1
    push argument 0
    call Sys.computeParity 1
    pop temp 0

    push temp 0
    push constant 0
    eq
    if-goto CLEAR_MSB

    // Set bit 15 (32768)
    push argument 0
    push constant 32768
    or
    return

    label CLEAR_MSB
    // Clear bit 15
    push argument 0
    push constant 32767
    and
    return

// Optional startup function for initial testing
function Sys.init 0
    push constant 12345  // example test value
    call Sys.encode 1

    label HALT_LOOP
    goto HALT_LOOP
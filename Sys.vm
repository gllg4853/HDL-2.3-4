// Sys.vm â€” Complete Implementation for Activity Sheet 2.5

// XOR: bitwise exclusive OR of two values
function Sys.xor 0
    push argument 0
    push argument 1
    or
    pop temp 0

    push argument 0
    push argument 1
    and
    not
    pop temp 1

    push temp 0
    push temp 1
    and
    return

// shiftLeft(x, y): computes x << y = x * 2^y
function Sys.shiftLeft 2
    push argument 0
    pop local 0 // x
    push argument 1
    pop local 1 // y

    label LOOP
    push local 1
    push constant 0
    eq
    if-goto END

    push local 0
    push local 0
    add
    pop local 0

    push local 1
    push constant 1
    sub
    pop local 1

    goto LOOP

    label END
    push local 0
    return

// computeParity: XOR all 15 LSBs (a0 to a14)
function Sys.computeParity 1
    push constant 0
    pop local 0 // result
    push constant 0
    pop local 1 // i

    label LOOP
    push local 1
    push constant 15
    eq
    if-goto END

    push constant 1
    push local 1
    call Sys.shiftLeft 2
    pop temp 0 // bitmask = 1 << i

    push argument 0
    push temp 0
    and
    pop temp 1 // ith bit isolated

    push temp 1
    push constant 0
    eq
    if-goto SKIP

    push local 0
    push constant 1
    call Sys.xor 2
    pop local 0 // result ^= 1

    label SKIP
    push local 1
    push constant 1
    add
    pop local 1 // i++
    goto LOOP

    label END
    push local 0
    return

// encode: sets or clears bit 15 depending on parity
function Sys.encode 1
    push argument 0
    call Sys.computeParity 1
    pop temp 0 // parity

    push temp 0
    push constant 0
    eq
    if-goto CLEAR

    // Set MSB (bit 15) to 1
    push constant 32768 // 2^15
    push argument 0
    or
    return

    label CLEAR
    // Clear MSB (bit 15) to 0
    push constant 32767 // All 1s except MSB
    push argument 0
    and
    return

// Optional: init function to run something at start
default function Sys.init 0
    // Can add test code here if needed
    label WHILE
    goto WHILE
